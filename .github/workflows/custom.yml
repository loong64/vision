name: custom build

on:
  workflow_dispatch:
    inputs:
      app_version:
        description: 'Build version'
        required: true
        default: ''

jobs:
  custom:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: ['vision']
        platform: ['cp39-manylinux_loongarch64', 'cp310-manylinux_loongarch64', 'cp311-manylinux_loongarch64', 'cp312-manylinux_loongarch64', 'cp313-manylinux_loongarch64']
    steps:
      - name: Get version
        run: |
          app_version=${{ github.event.inputs.app_version }}
          echo "BUILD_VERSION=${app_version/v/}" >> $GITHUB_ENV

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          repository: pytorch/vision
          ref: ${{ github.event.inputs.app_version }}
          submodules: true

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Build wheels
        uses: loong64/cibuildwheel@v2.23.2
        env:
          CIBW_MANYLINUX_LOONGARCH64_IMAGE: "ghcr.io/loong64/manylinuxloongarch64-builder:cpu-loongarch64"
          CIBW_ARCHS: loongarch64
          CIBW_BUILD: ${{ matrix.platform }}
          CIBW_BUILD_VERBOSITY: 1
          CIBW_TEST_SKIP: "*"
          CIBW_BEFORE_BUILD_LINUX: >
            pip install https://github.com/loong64/auditwheel/releases/download/6.2.0/auditwheel-6.2.0-py3-none-any.whl
          CIBW_ENVIRONMENT_LINUX: >
            BUILD_VERSION=${{ env.BUILD_VERSION }}
            LD_LIBRARY_PATH="/usr/local/lib:${LD_LIBRARY_PATH}"
            PIP_EXTRA_INDEX_URL="https://gitlab.com/api/v4/projects/65746188/packages/pypi/simple"
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
            mkdir -p dist {dest_dir} && 
            cp -f {wheel} dist && 
            for pkg in dist/*-linux_*.whl; do 
              if [[ ! -e $pkg ]]; then 
                continue
              fi
              abs_pkg=$(realpath $pkg)
              repair_manylinux_2_38.sh $abs_pkg
            done &&
            python packaging/wheel/relocate.py &&
            pip install torchvision-extra-decoders &&
            cp -f dist/*.whl {dest_dir}

      - name: Upload wheels
        run: |
          pip install twine==6.0.1
          for file in wheelhouse/*.whl; do
            twine upload --repository-url https://gitlab.com/api/v4/projects/65746188/packages/pypi $file || true
          done
        env:
          TWINE_USERNAME: ${{ github.repository_owner }}
          TWINE_PASSWORD: ${{ secrets.GL_TOKEN }}